- dif_type had better be a string

- implementare l'event kernel --> user RINA_KERN_CONFIG_CHANGED, per avvisare
  le applicazioni che è necessario rifare un ipcps_fetch()

- flow entry pendenti nel kernel devono sparire dopo un po', per evitare leakage

- passare ad autotools

- limitare la lunghezza delle code nel kernel

- vmpi_provider_find_instance non dovrebbe essere bloccante

- quando un ipcp normale viene distrutto, fare il cleanup completo delle
  strutture dati

- rimuovere usleep() hack in uipcp_server

- rina-utils: routine di deserializzazione devono gestire errori di lunghezza

- fix permissions to /var/rina/ directory

- aggiustare il locking:
    a) flow_lookup() dovrebbe sparire
    b) il global lock deve sparire, almeno nel datapath.
    c) il punto b) non è solo una questione di performance. È anzi prima di tutto
       un modo di poter invocare lock diversi a diversy layer lungo il datapath
       di ricezione e trasmissione
    d) attualmente il locking non è safe nel datapath (per esempio vedi
       rina_normal_sdu_write() o rina_normal_sdu_rx()

- shim-veth --> ha il vantaggio di non necessitare di sistemi di directory, e
  permette di costruire topologie di DIF arbitrarie su un singolo host

- rivedere se è la struct upper_ref è ancora necessaria, o se può essere rimossa

- è vero che rina_io_write() ritorna la lunghezza della SDU trasmessa in caso di
  successo, ma non c'è bisogno che le sdu_write callbacks facciano lo stesso: è
  fastidioso dover condizionalmente sottrarre la lunghezza del PCI. Piuttosto
  ritornare 0 in caso di successo.
