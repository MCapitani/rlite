- implementare l'event kernel --> user RLITE_KER_CONFIG_CHANGED, per avvisare
  le applicazioni che è necessario rifare un ipcps_fetch()

- vmpi_provider_find_instance non dovrebbe essere bloccante

- flow entry in stato ALLOCATED ma mai associate ad un file descriptor con
  bind() dovrebbero sparire dopo un po', altrimenti c'è leakage

- rlite-utils: routine di deserializzazione devono gestire errori di lunghezza

- se si perde la PDU iniziale contenente il DRF è un casino, anche se c'è la
  ritrasmissione. Dal punto di vista del protocollo, infatti, come gestisco
  i pacchetti successivi (che arrivano prima che il trasmettitore si accorge
  di dover ritrasmettere la PDU con il DRF settato)? Sarebbe una stupidaggine
  buttare questi pacchetti. Sembra sia conveniente introdurre nel DTP un flag
  di stato "waitingForDRF" che aiuti a "forzare il DRF" quando esso non è
  presente ma dovrebbe

- CDAP: supportare un semplice meccanismo di ritrasmissione, in caso la
  connessione CDAP sia supportata da un flusso non affidabile

- VMPI: TX ring è probabilmente inutile per un utilizzo kernelspace-only

- addr size non consistente (PCI/resto dello stack)

- implementare un semplice livello di protezione, ad esempio distinguendo
  quelle operazioni che possono essere effettuate solo da UIPCP, ed altre
  che possono essere fatte da tutte le applicazioni

- implementare list_for_each_entry_safe()

- remove race condition that happens sometimes with ./gen.py -t inet4 -l3:
  getting ERR in the logs
